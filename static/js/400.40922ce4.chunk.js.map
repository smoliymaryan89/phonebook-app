{"version":3,"file":"static/js/400.40922ce4.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/input/src/input-group.tsx","../node_modules/@chakra-ui/input/src/input-element.tsx","../node_modules/@chakra-ui/icon/src/create-icon.tsx","../node_modules/@chakra-ui/icons/src/ViewOff.tsx","../node_modules/@chakra-ui/icons/src/View.tsx","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx","../node_modules/@chakra-ui/layout/src/flex.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs"],"sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\nimport { cloneElement } from \"react\"\n\nconst [InputGroupStylesProvider, useInputGroupStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `InputGroupStylesContext`,\n  errorMessage: `useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<InputGroup />\" `,\n})\n\nexport { useInputGroupStyles }\n\nexport interface InputGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Input\"> {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">(\n  function InputGroup(props, ref) {\n    const styles = useMultiStyleConfig(\"Input\", props)\n    const { children, className, ...rest } = omitThemingProps(props)\n\n    const _className = cx(\"chakra-input__group\", className)\n    const groupStyles: InputGroupProps = {}\n\n    const validChildren = getValidChildren(children)\n\n    const input: any = styles.field\n\n    validChildren.forEach((child: any) => {\n      if (!styles) return\n\n      if (input && child.type.id === \"InputLeftElement\") {\n        groupStyles.paddingStart = input.height ?? input.h\n      }\n\n      if (input && child.type.id === \"InputRightElement\") {\n        groupStyles.paddingEnd = input.height ?? input.h\n      }\n\n      if (child.type.id === \"InputRightAddon\") {\n        groupStyles.borderEndRadius = 0\n      }\n\n      if (child.type.id === \"InputLeftAddon\") {\n        groupStyles.borderStartRadius = 0\n      }\n    })\n\n    const clones = validChildren.map((child: any) => {\n      /**\n       * Make it possible to override the size and variant from `Input`\n       */\n\n      const theming = compact({\n        size: child.props?.size || props.size,\n        variant: child.props?.variant || props.variant,\n      })\n\n      return child.type.id !== \"Input\"\n        ? cloneElement(child, theming)\n        : cloneElement(child, Object.assign(theming, groupStyles, child.props))\n    })\n\n    return (\n      <chakra.div\n        className={_className}\n        ref={ref}\n        __css={{\n          width: \"100%\",\n          display: \"flex\",\n          position: \"relative\",\n          // Parts of inputs override z-index to ensure that they stack correctly on each other\n          // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes\n          isolation: \"isolate\",\n          ...styles.group,\n        }}\n        data-group\n        {...rest}\n      >\n        <InputGroupStylesProvider value={styles}>\n          {clones}\n        </InputGroupStylesProvider>\n      </chakra.div>\n    )\n  },\n)\n\nInputGroup.displayName = \"InputGroup\"\n","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useInputGroupStyles } from \"./input-group\"\n\nexport interface InputElementProps extends HTMLChakraProps<\"div\"> {\n  placement?: \"left\" | \"right\"\n}\n\nconst StyledInputElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2,\n  },\n})\n\nconst InputElement = forwardRef<InputElementProps, \"div\">(function InputElement(\n  props,\n  ref,\n) {\n  const { placement = \"left\", ...rest } = props\n\n  const styles = useInputGroupStyles()\n  const input: any = styles.field\n\n  const attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\"\n\n  const elementStyles: SystemStyleObject = {\n    [attr]: \"0\",\n    width: input?.height ?? input?.h,\n    height: input?.height ?? input?.h,\n    fontSize: input?.fontSize,\n    ...styles.element,\n  }\n\n  return <StyledInputElement ref={ref} __css={elementStyles} {...rest} />\n})\n\n// This is used in `input-group.tsx`\nInputElement.id = \"InputElement\"\n\nInputElement.displayName = \"InputElement\"\n\nexport type InputLeftElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputLeftElement = forwardRef<InputLeftElementProps, \"div\">(\n  function InputLeftElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__left-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"left\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputLeftElement.id = \"InputLeftElement\"\n\nInputLeftElement.displayName = \"InputLeftElement\"\n\nexport type InputRightElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputRightElement = forwardRef<InputRightElementProps, \"div\">(\n  function InputRightElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__right-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"right\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputRightElement.id = \"InputRightElement\"\n\nInputRightElement.displayName = \"InputRightElement\"\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { Children } from \"react\"\nimport { Icon, IconProps } from \"./icon\"\n\ninterface CreateIconOptions {\n  /**\n   * The icon `svg` viewBox\n   * @default \"0 0 24 24\"\n   */\n  viewBox?: string\n  /**\n   * The `svg` path or group element\n   * @type React.ReactElement | React.ReactElement[]\n   */\n  path?: React.ReactElement | React.ReactElement[]\n  /**\n   * If the `svg` has a single path, simply copy the path's `d` attribute\n   */\n  d?: string\n  /**\n   * The display name useful in the dev tools\n   */\n  displayName?: string\n  /**\n   * Default props automatically passed to the component; overwritable\n   */\n  defaultProps?: IconProps\n}\n\nexport function createIcon(options: CreateIconOptions) {\n  const {\n    viewBox = \"0 0 24 24\",\n    d: pathDefinition,\n    displayName,\n    defaultProps = {},\n  } = options\n  const path = Children.toArray(options.path)\n\n  const Comp = forwardRef<IconProps, \"svg\">((props, ref) => (\n    <Icon ref={ref} viewBox={viewBox} {...defaultProps} {...props}>\n      {path.length ? path : <path fill=\"currentColor\" d={pathDefinition} />}\n    </Icon>\n  ))\n\n  Comp.displayName = displayName\n\n  return Comp\n}\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const ViewOffIcon = createIcon({\n  displayName: \"ViewOffIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M23.2,10.549a20.954,20.954,0,0,0-4.3-3.6l4-3.995a1,1,0,1,0-1.414-1.414l-.018.018a.737.737,0,0,1-.173.291l-19.5,19.5c-.008.007-.018.009-.026.017a1,1,0,0,0,1.631,1.088l4.146-4.146a11.26,11.26,0,0,0,4.31.939h.3c4.256,0,8.489-2.984,11.051-5.8A2.171,2.171,0,0,0,23.2,10.549ZM16.313,13.27a4.581,4.581,0,0,1-3,3.028,4.3,4.3,0,0,1-3.1-.19.253.253,0,0,1-.068-.407l5.56-5.559a.252.252,0,0,1,.407.067A4.3,4.3,0,0,1,16.313,13.27Z\" />\n      <path d=\"M7.615,13.4a.244.244,0,0,0,.061-.24A4.315,4.315,0,0,1,7.5,12,4.5,4.5,0,0,1,12,7.5a4.276,4.276,0,0,1,1.16.173.244.244,0,0,0,.24-.062l1.941-1.942a.254.254,0,0,0-.1-.421A10.413,10.413,0,0,0,12,4.75C7.7,4.692,3.4,7.7.813,10.549a2.15,2.15,0,0,0-.007,2.9,21.209,21.209,0,0,0,3.438,3.03.256.256,0,0,0,.326-.029Z\" />\n    </g>\n  ),\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const ViewIcon = createIcon({\n  displayName: \"ViewIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M23.432,10.524C20.787,7.614,16.4,4.538,12,4.6,7.6,4.537,3.213,7.615.568,10.524a2.211,2.211,0,0,0,0,2.948C3.182,16.351,7.507,19.4,11.839,19.4h.308c4.347,0,8.671-3.049,11.288-5.929A2.21,2.21,0,0,0,23.432,10.524ZM7.4,12A4.6,4.6,0,1,1,12,16.6,4.6,4.6,0,0,1,7.4,12Z\" />\n      <circle cx=\"12\" cy=\"12\" r=\"2\" />\n    </g>\n  ),\n})\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { register } from 'redux/auth/authOperations';\nimport * as yup from 'yup';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputRightElement,\n  VStack,\n} from '@chakra-ui/react';\nimport { ViewIcon, ViewOffIcon } from '@chakra-ui/icons';\n\nconst validationSchema = yup.object({\n  name: yup\n    .string()\n    .matches(/^[A-Za-z\\s'-]+$/, 'Please enter a valid name.')\n    .required('Name is required!'),\n  email: yup\n    .string()\n    .email('Invalid email address.')\n    .required('Email is required!'),\n  password: yup\n    .string()\n    .min(8, 'Password must be at least 8 characters.')\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]+$/,\n      'Password must contain at least one letter, one number, and one special character'\n    )\n    .required('Password is required!'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match.')\n    .required('Confirm password is required!'),\n});\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const toggleShowPassword = () => setShowPassword(prev => !prev);\n  const toggleShowConfirmPassword = () => setShowConfirmPassword(prev => !prev);\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n    },\n    validationSchema,\n    onSubmit: ({ name, email, password }) => {\n      dispatch(register({ name, email, password }));\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <Flex justify=\"center\" align=\"center\" h=\"100vh\">\n      <Box bg=\"white\" p={10} rounded=\"md\" w={500} boxShadow=\"xl\">\n        <VStack as=\"form\" spacing={4} noValidate onSubmit={formik.handleSubmit}>\n          <FormControl\n            isRequired\n            mb={2}\n            isInvalid={formik.touched.name && formik.errors.name}\n          >\n            <FormLabel>Name</FormLabel>\n            <Input\n              name=\"name\"\n              type=\"text\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={formik.values.name}\n              variant=\"filled\"\n              focusBorderColor=\"purple.400\"\n            />\n\n            <FormErrorMessage>{formik.errors.name}</FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            isRequired\n            mb={2}\n            isInvalid={formik.touched.email && formik.errors.email}\n          >\n            <FormLabel>Email</FormLabel>\n            <Input\n              name=\"email\"\n              type=\"email\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={formik.values.email}\n              variant=\"filled\"\n              focusBorderColor=\"purple.400\"\n            />\n            <FormErrorMessage>{formik.errors.email}</FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            isRequired\n            mb={2}\n            isInvalid={formik.touched.password && formik.errors.password}\n          >\n            <FormLabel>Password</FormLabel>\n            <InputGroup>\n              <Input\n                name=\"password\"\n                type={showPassword ? 'text' : 'password'}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.password}\n                variant=\"filled\"\n                focusBorderColor=\"purple.400\"\n              />\n              <InputRightElement>\n                <Button\n                  bg=\"transparent\"\n                  _hover={{ bg: 'none' }}\n                  onClick={toggleShowPassword}\n                >\n                  {showPassword ? (\n                    <ViewOffIcon\n                      color=\"purple.500\"\n                      _hover={{ color: 'purple.600' }}\n                    />\n                  ) : (\n                    <ViewIcon\n                      color=\"purple.500\"\n                      _hover={{ color: 'purple.600' }}\n                    />\n                  )}\n                </Button>\n              </InputRightElement>\n            </InputGroup>\n\n            <FormErrorMessage>{formik.errors.password}</FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            isRequired\n            mb={3}\n            isInvalid={\n              formik.touched.confirmPassword && formik.errors.confirmPassword\n            }\n          >\n            <FormLabel>Confirm password</FormLabel>\n            <InputGroup>\n              <Input\n                name=\"confirmPassword\"\n                type={showConfirmPassword ? 'text' : 'password'}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.confirmPassword}\n                variant=\"filled\"\n                focusBorderColor=\"purple.400\"\n              />\n              <InputRightElement>\n                <Button\n                  bg=\"transparent\"\n                  _hover={{ bg: 'none' }}\n                  onClick={toggleShowConfirmPassword}\n                >\n                  {showConfirmPassword ? (\n                    <ViewOffIcon\n                      color=\"purple.500\"\n                      _hover={{ color: 'purple.600' }}\n                    />\n                  ) : (\n                    <ViewIcon\n                      color=\"purple.500\"\n                      _hover={{ color: 'purple.600' }}\n                    />\n                  )}\n                </Button>\n              </InputRightElement>\n            </InputGroup>\n            <FormErrorMessage>{formik.errors.confirmPassword}</FormErrorMessage>\n          </FormControl>\n\n          <Button type=\"submit\" w=\"full\">\n            Sign up\n          </Button>\n        </VStack>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\nimport React from 'react';\n\nconst RegisterPage = () => {\n  return (\n    <>\n      <RegisterForm />\n    </>\n  );\n};\n\nexport default RegisterPage;\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface FlexOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n\n  /**\n   * Shorthand for `flexDirection` style prop\n   * @type SystemProps[\"flexDirection\"]\n   * @default \"row\"\n   */\n  direction?: SystemProps[\"flexDirection\"]\n\n  /**\n   * Shorthand for `flexBasis` style prop\n   * @type SystemProps[\"flexBasis\"]\n   */\n  basis?: SystemProps[\"flexBasis\"]\n\n  /**\n   * Shorthand for `flexGrow` style prop\n   * @type SystemProps[\"flexGrow\"]\n   */\n  grow?: SystemProps[\"flexGrow\"]\n\n  /**\n   * Shorthand for `flexShrink` style prop\n   * @type SystemProps[\"flexShrink\"]\n   */\n  shrink?: SystemProps[\"flexShrink\"]\n}\n\nexport interface FlexProps extends HTMLChakraProps<\"div\">, FlexOptions {}\n\n/**\n * React component used to create flexbox layouts.\n *\n * It renders a `div` with `display: flex` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">(function Flex(props, ref) {\n  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } =\n    props\n\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nFlex.displayName = \"Flex\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n"],"names":["createContext","errorMessage","InputGroupStylesProvider","useInputGroupStyles","InputGroup","props","forwardRef","styles","children","className","useMultiStyleConfig","omitThemingProps","rest","_className","groupStyles","validChildren","cx","input","field","getValidChildren","forEach","child","type","id","paddingStart","_a","height","h","paddingEnd","_b","borderEndRadius","borderStartRadius","clones","map","theming","size","variant","compact","Object","assign","cloneElement","div","__css","name","chakra","display","position","isolation","group","value","displayName","alignItems","justifyContent","top","zIndex","InputElement","ref","attr","elementStyles","fontSize","element","baseStyle","InputLeftElement","StyledInputElement","viewBox","pathDefinition","d","defaultProps","path","toArray","Comp","createIcon","Children","Icon","options","length","fill","ViewOffIcon","jsx","ViewIcon","cy","r","validationSchema","yup","matches","required","email","password","min","confirmPassword","oneOf","dispatch","useDispatch","useState","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","formik","useFormik","initialValues","onSubmit","register","resetForm","justify","align","bg","p","rounded","w","boxShadow","as","spacing","noValidate","handleSubmit","isRequired","mb","isInvalid","touched","errors","I","onChange","handleChange","onBlur","handleBlur","values","focusBorderColor","InputRightElement","_hover","onClick","prev","color","direction","wrap","basis","grow","shrink","flexDirection","flexWrap","flexBasis","flexGrow","flexShrink","Flex","object","clone","key"],"sourceRoot":""}