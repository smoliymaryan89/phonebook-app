{"version":3,"file":"static/js/501.511e5b06.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { login } from 'redux/auth/authOperations';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\n\nconst validationSchema = yup.object({\n  email: yup\n    .string()\n    .email('Enter valid email')\n    .required('Please enter your email address.'),\n  password: yup.string().required('Please enter your password.'),\n});\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema,\n    onSubmit: value => {\n      dispatch(login(value));\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <Box\n      bg=\"white\"\n      p={10}\n      rounded=\"md\"\n      w={500}\n      boxShadow=\"xl\"\n      position={'absolute'}\n      top={'50%'}\n      left={'50%'}\n      transform=\"translate(-50%, 50%)\"\n    >\n      <VStack as=\"form\" spacing={4} noValidate onSubmit={formik.handleSubmit}>\n        <FormControl\n          isRequired\n          mb={3}\n          isInvalid={formik.touched.email && formik.errors.email}\n        >\n          <FormLabel>Email</FormLabel>\n          <Input\n            name=\"email\"\n            type=\"email\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.email}\n            variant=\"filled\"\n            focusBorderColor=\"purple.400\"\n          />\n          <FormErrorMessage>{formik.errors.email}</FormErrorMessage>\n        </FormControl>\n\n        <FormControl\n          isRequired\n          mb={5}\n          isInvalid={formik.touched.password && formik.errors.password}\n        >\n          <FormLabel>Password</FormLabel>\n          <Input\n            name=\"password\"\n            type=\"password\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.password}\n            variant=\"filled\"\n            focusBorderColor=\"purple.400\"\n          />\n          <FormErrorMessage>{formik.errors.password}</FormErrorMessage>\n        </FormControl>\n\n        <Button type=\"submit\">Login</Button>\n      </VStack>\n    </Box>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm/LoginForm';\nimport React from 'react';\n\nconst LoginPage = () => {\n  return (\n    <>\n      <LoginForm />\n    </>\n  );\n};\n\nexport default LoginPage;\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n"],"names":["validationSchema","yup","email","required","password","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","value","login","resetForm","bg","p","rounded","w","boxShadow","position","top","left","transform","as","spacing","noValidate","handleSubmit","isRequired","mb","isInvalid","touched","errors","I","name","type","onChange","handleChange","onBlur","handleBlur","values","variant","focusBorderColor","styles","useStyleConfig","className","children","requiredIndicator","RequiredIndicator","jsxs","optionalIndicator","cx","field","rest","useFormControlContext","passedProps","ownProps","_a","getLabelProps","label","chakra","__css","display","ref","omitThemingProps","FormLabel","displayName","useFormControlStyles","span","getRequiredIndicatorProps","forwardRef"],"sourceRoot":""}