{"version":3,"file":"static/js/785.0f6fed2e.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/layout/src/flex.tsx","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface FlexOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n\n  /**\n   * Shorthand for `flexDirection` style prop\n   * @type SystemProps[\"flexDirection\"]\n   * @default \"row\"\n   */\n  direction?: SystemProps[\"flexDirection\"]\n\n  /**\n   * Shorthand for `flexBasis` style prop\n   * @type SystemProps[\"flexBasis\"]\n   */\n  basis?: SystemProps[\"flexBasis\"]\n\n  /**\n   * Shorthand for `flexGrow` style prop\n   * @type SystemProps[\"flexGrow\"]\n   */\n  grow?: SystemProps[\"flexGrow\"]\n\n  /**\n   * Shorthand for `flexShrink` style prop\n   * @type SystemProps[\"flexShrink\"]\n   */\n  shrink?: SystemProps[\"flexShrink\"]\n}\n\nexport interface FlexProps extends HTMLChakraProps<\"div\">, FlexOptions {}\n\n/**\n * React component used to create flexbox layouts.\n *\n * It renders a `div` with `display: flex` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">(function Flex(props, ref) {\n  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } =\n    props\n\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nFlex.displayName = \"Flex\"\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { register } from 'redux/auth/authOperations';\nimport * as yup from 'yup';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\n\nconst validationSchema = yup.object({\n  name: yup\n    .string()\n    .matches(/^[A-Za-z\\s'-]+$/, 'Please enter a valid name.')\n    .required('Name is required!'),\n  email: yup\n    .string()\n    .email('Invalid email address.')\n    .required('Email is required!'),\n  password: yup\n    .string()\n    .min(8, 'Password must be at least 8 characters.')\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]+$/,\n      'Password must contain at least one letter, one number, and one special character'\n    )\n    .required('Password is required!'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match.')\n    .required('Confirm password is required!'),\n});\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n    },\n    validationSchema,\n    onSubmit: ({ name, email, password }) => {\n      dispatch(register({ name, email, password }));\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <Flex justify=\"center\" align=\"center\" h=\"100vh\">\n      <Box bg=\"white\" p={10} rounded=\"md\" w={500} boxShadow=\"xl\">\n        <VStack as=\"form\" spacing={4} noValidate onSubmit={formik.handleSubmit}>\n          <FormControl\n            isRequired\n            mb={2}\n            isInvalid={formik.touched.name && formik.errors.name}\n          >\n            <FormLabel>Name</FormLabel>\n            <Input\n              name=\"name\"\n              type=\"text\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={formik.values.name}\n              variant=\"filled\"\n              focusBorderColor=\"purple.400\"\n            />\n\n            <FormErrorMessage>{formik.errors.name}</FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            isRequired\n            mb={2}\n            isInvalid={formik.touched.email && formik.errors.email}\n          >\n            <FormLabel>Email</FormLabel>\n            <Input\n              name=\"email\"\n              type=\"email\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={formik.values.email}\n              variant=\"filled\"\n              focusBorderColor=\"purple.400\"\n            />\n            <FormErrorMessage>{formik.errors.email}</FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            isRequired\n            mb={2}\n            isInvalid={formik.touched.password && formik.errors.password}\n          >\n            <FormLabel>Password</FormLabel>\n            <Input\n              name=\"password\"\n              type=\"password\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={formik.values.password}\n              variant=\"filled\"\n              focusBorderColor=\"purple.400\"\n            />\n\n            <FormErrorMessage>{formik.errors.password}</FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            isRequired\n            mb={3}\n            isInvalid={\n              formik.touched.confirmPassword && formik.errors.confirmPassword\n            }\n          >\n            <FormLabel>Confirm password</FormLabel>\n            <Input\n              name=\"confirmPassword\"\n              type=\"password\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={formik.values.confirmPassword}\n              variant=\"filled\"\n              focusBorderColor=\"purple.400\"\n            />\n            <FormErrorMessage>{formik.errors.confirmPassword}</FormErrorMessage>\n          </FormControl>\n\n          <Button type=\"submit\" w=\"full\">\n            Sign up\n          </Button>\n        </VStack>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\nimport React from 'react';\n\nconst RegisterPage = () => {\n  return (\n    <>\n      <RegisterForm />\n    </>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["props","forwardRef","direction","align","justify","wrap","basis","grow","shrink","rest","styles","display","flexDirection","alignItems","justifyContent","flexWrap","flexBasis","flexGrow","flexShrink","div","__css","Flex","chakra","validationSchema","yup","name","matches","required","email","password","min","confirmPassword","oneOf","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","register","resetForm","h","bg","p","rounded","w","boxShadow","as","spacing","noValidate","handleSubmit","isRequired","mb","isInvalid","touched","errors","I","type","onChange","handleChange","onBlur","handleBlur","value","values","variant","focusBorderColor"],"sourceRoot":""}