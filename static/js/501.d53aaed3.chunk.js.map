{"version":3,"file":"static/js/501.d53aaed3.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/layout/src/flex.tsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { login } from 'redux/auth/authOperations';\nimport * as yup from 'yup';\nimport useAuth from 'hooks/useAuth';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  Text,\n  VStack,\n} from '@chakra-ui/react';\n\nconst validationSchema = yup.object({\n  email: yup\n    .string()\n    .email('Enter valid email')\n    .required('Please enter your email address.'),\n  password: yup.string().required('Please enter your password.'),\n});\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const { error } = useAuth();\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema,\n    onSubmit: value => {\n      dispatch(login(value));\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <Flex justify=\"center\" align=\"center\" h=\"75vh\">\n      <Box bg=\"white\" p={10} rounded=\"md\" w={500} boxShadow=\"xl\">\n        {error === 400 && (\n          <Text as=\"p\" color=\"red.500\" fontSize=\"sm\" lineHeight=\"normal\" mb={2}>\n            Incorrect email address or password.\n          </Text>\n        )}\n        <VStack as=\"form\" spacing={4} noValidate onSubmit={formik.handleSubmit}>\n          <FormControl\n            isRequired\n            mb={3}\n            isInvalid={formik.touched.email && formik.errors.email}\n          >\n            <FormLabel>Email</FormLabel>\n            <Input\n              name=\"email\"\n              type=\"email\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={formik.values.email}\n              variant=\"filled\"\n              focusBorderColor=\"purple.400\"\n            />\n            <FormErrorMessage>{formik.errors.email}</FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            isRequired\n            mb={5}\n            isInvalid={formik.touched.password && formik.errors.password}\n          >\n            <FormLabel>Password</FormLabel>\n            <Input\n              name=\"password\"\n              type=\"password\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={formik.values.password}\n              variant=\"filled\"\n              focusBorderColor=\"purple.400\"\n            />\n            <FormErrorMessage>{formik.errors.password}</FormErrorMessage>\n          </FormControl>\n\n          <Button type=\"submit\" w=\"full\">\n            Login\n          </Button>\n        </VStack>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm/LoginForm';\nimport React from 'react';\n\nconst LoginPage = () => {\n  return (\n    <>\n      <LoginForm />\n    </>\n  );\n};\n\nexport default LoginPage;\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface FlexOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n\n  /**\n   * Shorthand for `flexDirection` style prop\n   * @type SystemProps[\"flexDirection\"]\n   * @default \"row\"\n   */\n  direction?: SystemProps[\"flexDirection\"]\n\n  /**\n   * Shorthand for `flexBasis` style prop\n   * @type SystemProps[\"flexBasis\"]\n   */\n  basis?: SystemProps[\"flexBasis\"]\n\n  /**\n   * Shorthand for `flexGrow` style prop\n   * @type SystemProps[\"flexGrow\"]\n   */\n  grow?: SystemProps[\"flexGrow\"]\n\n  /**\n   * Shorthand for `flexShrink` style prop\n   * @type SystemProps[\"flexShrink\"]\n   */\n  shrink?: SystemProps[\"flexShrink\"]\n}\n\nexport interface FlexProps extends HTMLChakraProps<\"div\">, FlexOptions {}\n\n/**\n * React component used to create flexbox layouts.\n *\n * It renders a `div` with `display: flex` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">(function Flex(props, ref) {\n  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } =\n    props\n\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nFlex.displayName = \"Flex\"\n"],"names":["validationSchema","yup","email","required","password","dispatch","useDispatch","error","useAuth","formik","useFormik","initialValues","onSubmit","value","login","resetForm","justify","align","h","bg","p","rounded","w","boxShadow","as","color","fontSize","lineHeight","mb","spacing","noValidate","handleSubmit","isRequired","isInvalid","touched","errors","I","name","type","onChange","handleChange","onBlur","handleBlur","values","variant","focusBorderColor","props","forwardRef","styles","className","useStyleConfig","omitThemingProps","textAlign","decoration","casing","rest","aliasedProps","textDecoration","compact","textTransform","__css","Text","chakra","cx","direction","wrap","basis","grow","shrink","display","flexDirection","alignItems","justifyContent","flexWrap","flexBasis","flexGrow","flexShrink","div","Flex"],"sourceRoot":""}