{"version":3,"file":"static/js/520.4f908186.chunk.js","mappings":"uMAkBA,UAhBqB,WACnB,OACE,SAAC,IAAD,CAAMA,MAAM,SAASC,QAAQ,SAASC,EAAE,OAAxC,UACE,UAAC,KAAD,CAAKC,EAAE,KAAP,WACE,SAAC,IAAD,CAASC,UAAU,SAASC,KAAK,MAAMC,GAAI,EAA3C,kBAGA,SAAC,IAAD,CAAMC,GAAG,IAAIH,UAAU,SAASI,SAAS,KAAzC,uGAOP,C,iMCJGC,GAAOC,EAAAA,EAAAA,IAAW,SAAeC,EAAOC,GAC1C,IAAMZ,GAASa,EAAAA,EAAAA,IAAe,OAAQF,GACtC,GAA0DG,EAAAA,EAAAA,IAAiBH,GAA1BP,GAAjD,EAAQW,UAAR,EAAmBC,MAAnB,EAA0BC,WAA1B,EAAsCC,QAAtC,aACMC,GAAeC,EAAAA,EAAAA,GAAQ,CAC3BC,UAAWV,EAAMK,MACjBM,eAAgBX,EAAMM,WACtBM,cAAeZ,EAAMO,SAEvB,OAAuBM,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,GADwB,wBAGtBb,IAAAA,EACAG,WAAWW,EAAAA,EAAAA,IAAG,cAAef,EAAMI,YAChCI,GACAf,GANmB,IAOtB,MAAOJ,IAGZ,IACDS,EAAK,YAAc,M,0JCpBfA,GAAUC,EAAAA,EAAAA,IAAW,SAAkBC,EAAOC,GAC9C,IAAIK,GAASJ,EAAAA,EAAAA,IAAe,UAAWF,GACzC,GAA+BG,EAAAA,EAAAA,IAAiBH,GAA1BY,GAAtB,EAAQI,WAAR,aACA,OAAuBC,EAAAA,EAAAA,KACrBH,EAAAA,EAAAA,IADwB,gBAGtBb,IAAAA,EACAe,WAAWD,EAAAA,EAAAA,IAAG,iBAAkBf,EAAMgB,YACnCJ,GALmB,IAMtB,MAAON,IAGZ,IACDR,EAAQ,YAAc,S,6KChBlBA,GAAOC,EAAAA,EAAAA,IAAW,SAAemB,EAAO7B,GAC1C,IAAQC,EAAkE4B,EAAlE5B,UAAW6B,EAAuDD,EAAvDC,MAAOC,EAAgDF,EAAhDE,QAASC,EAAuCH,EAAvCG,KAAMC,EAAiCJ,EAAjCI,MAAOhB,EAA0BY,EAA1BZ,KAAMN,EAAoBkB,EAApBlB,OAAWuB,GAAjE,OAA0EL,EAA1E,GACMM,EAAS,CACbC,QAAS,OACTC,cAAepC,EACfqC,WAAYR,EACZS,eAAgBR,EAChBS,SAAUR,EACVS,UAAWR,EACXS,SAAUzB,EACVM,WAAYZ,GAEd,OAAuBgC,EAAAA,EAAAA,KAAIlB,EAAAA,EAAAA,KAAD,QAAezB,IAAAA,EAAK,MAAOmC,GAAWD,GACjE,IACDzB,EAAK,YAAc,M,uBCrBnB,SAASW,EAAQwB,GACf,IAAMC,EAAQC,OAAOC,OAAO,CAAC,EAAGH,GAChC,IAAK,IAAII,KAAOH,OACK,IAAfA,EAAMG,WACDH,EAAMG,GAEjB,OAAOH,CACR,C","sources":["pages/NotFoundPage.jsx","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/layout/src/heading.tsx","../node_modules/@chakra-ui/layout/src/flex.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs"],"sourcesContent":["import { Box, Flex, Heading, Text } from '@chakra-ui/react';\n\nconst NotFoundPage = () => {\n  return (\n    <Flex align=\"center\" justify=\"center\" h=\"75vh\">\n      <Box w=\"sm\">\n        <Heading textAlign=\"center\" size=\"4xl\" mb={6}>\n          404\n        </Heading>\n        <Text as=\"p\" textAlign=\"center\" fontSize=\"md\">\n          The page you are looking for may have been moved, deleted, or possibly\n          never existed.\n        </Text>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default NotFoundPage;\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface FlexOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n\n  /**\n   * Shorthand for `flexDirection` style prop\n   * @type SystemProps[\"flexDirection\"]\n   * @default \"row\"\n   */\n  direction?: SystemProps[\"flexDirection\"]\n\n  /**\n   * Shorthand for `flexBasis` style prop\n   * @type SystemProps[\"flexBasis\"]\n   */\n  basis?: SystemProps[\"flexBasis\"]\n\n  /**\n   * Shorthand for `flexGrow` style prop\n   * @type SystemProps[\"flexGrow\"]\n   */\n  grow?: SystemProps[\"flexGrow\"]\n\n  /**\n   * Shorthand for `flexShrink` style prop\n   * @type SystemProps[\"flexShrink\"]\n   */\n  shrink?: SystemProps[\"flexShrink\"]\n}\n\nexport interface FlexProps extends HTMLChakraProps<\"div\">, FlexOptions {}\n\n/**\n * React component used to create flexbox layouts.\n *\n * It renders a `div` with `display: flex` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">(function Flex(props, ref) {\n  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } =\n    props\n\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nFlex.displayName = \"Flex\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n"],"names":["align","justify","h","w","textAlign","size","mb","as","fontSize","props","forwardRef","styles","className","useStyleConfig","omitThemingProps","decoration","casing","rest","aliasedProps","textDecoration","compact","textTransform","p","__css","Text","chakra","cx","h2","Heading","direction","wrap","basis","grow","shrink","display","flexDirection","alignItems","justifyContent","flexWrap","flexBasis","flexGrow","flexShrink","div","Flex","object","clone","Object","assign","key"],"sourceRoot":""}