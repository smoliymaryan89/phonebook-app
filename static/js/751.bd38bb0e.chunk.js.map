{"version":3,"file":"static/js/751.bd38bb0e.chunk.js","mappings":"uPA4GA,EAtGqB,WACnB,IAAMA,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,gBAAiB,IAEnBC,iBAAkBC,EAAAA,GAAW,CAC3BL,KAAMK,EAAAA,KAEHC,QAAQ,kBAAmB,6BAC3BC,SAAS,oBACZN,MAAOI,EAAAA,KAEJJ,MAAM,yBACNM,SAAS,sBACZL,SAAUG,EAAAA,KAEPG,IAAI,EAAG,0CACPF,QACC,8DACA,oFAEDC,SAAS,wBACZJ,gBAAiBE,EAAAA,KAEdI,MAAM,CAACJ,EAAAA,GAAQ,YAAa,MAAO,wBACnCE,SAAS,kCAGdG,SAAU,YAAgC,IAA7BV,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxBP,GAASgB,EAAAA,EAAAA,IAAS,CAAEX,KAAAA,EAAMC,MAAAA,EAAOC,SAAAA,KACjCL,EAAOe,WACR,IAGH,OACE,kBAAMF,SAAUb,EAAOgB,aAAvB,WACE,qCAEE,kBACEb,KAAK,OACLc,KAAK,OACLC,SAAUlB,EAAOmB,aACjBC,OAAQpB,EAAOqB,WACfC,MAAOtB,EAAOuB,OAAOpB,UAGxBH,EAAOwB,QAAQrB,MAAQH,EAAOyB,OAAOtB,MACpC,yBAAMH,EAAOyB,OAAOtB,OAClB,MAEJ,sCAEE,kBACEA,KAAK,QACLc,KAAK,QACLC,SAAUlB,EAAOmB,aACjBC,OAAQpB,EAAOqB,WACfC,MAAOtB,EAAOuB,OAAOnB,WAGxBJ,EAAOwB,QAAQpB,OAASJ,EAAOyB,OAAOrB,OACrC,yBAAMJ,EAAOyB,OAAOrB,QAClB,MAEJ,yCAEE,kBACED,KAAK,WACLc,KAAK,WACLC,SAAUlB,EAAOmB,aACjBC,OAAQpB,EAAOqB,WACfC,MAAOtB,EAAOuB,OAAOlB,cAGxBL,EAAOwB,QAAQnB,UAAYL,EAAOyB,OAAOpB,UACxC,yBAAML,EAAOyB,OAAOpB,WAClB,MAEJ,iDAEE,kBACEF,KAAK,kBACLc,KAAK,WACLC,SAAUlB,EAAOmB,aACjBC,OAAQpB,EAAOqB,WACfC,MAAOtB,EAAOuB,OAAOjB,qBAGxBN,EAAOwB,QAAQlB,iBAAmBN,EAAOyB,OAAOnB,iBAC/C,yBAAMN,EAAOyB,OAAOnB,kBAClB,MAEJ,mBAAQW,KAAK,SAAb,uBAGL,EC/FD,EARqB,WACnB,OACE,+BACE,SAAC,EAAD,KAGL,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { register } from 'redux/auth/authOperations';\nimport * as yup from 'yup';\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n    },\n    validationSchema: yup.object({\n      name: yup\n        .string()\n        .matches(/^[A-Za-z\\s'-]+$/, 'Please enter a valid name')\n        .required('Name is required'),\n      email: yup\n        .string()\n        .email('Invalid email address')\n        .required('Email is required!'),\n      password: yup\n        .string()\n        .min(8, 'Password must be at least 8 characters')\n        .matches(\n          /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]+$/,\n          'Password must contain at least one letter, one number, and one special character'\n        )\n        .required('Password is required'),\n      confirmPassword: yup\n        .string()\n        .oneOf([yup.ref('password'), null], 'Passwords must match')\n        .required('Confirm password is required'),\n    }),\n\n    onSubmit: ({ name, email, password }) => {\n      dispatch(register({ name, email, password }));\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <label>\n        Name\n        <input\n          name=\"name\"\n          type=\"text\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.name}\n        />\n      </label>\n      {formik.touched.name && formik.errors.name ? (\n        <div>{formik.errors.name}</div>\n      ) : null}\n\n      <label>\n        Email\n        <input\n          name=\"email\"\n          type=\"email\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.email}\n        />\n      </label>\n      {formik.touched.email && formik.errors.email ? (\n        <div>{formik.errors.email}</div>\n      ) : null}\n\n      <label>\n        Password\n        <input\n          name=\"password\"\n          type=\"password\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.password}\n        />\n      </label>\n      {formik.touched.password && formik.errors.password ? (\n        <div>{formik.errors.password}</div>\n      ) : null}\n\n      <label>\n        Confirm password\n        <input\n          name=\"confirmPassword\"\n          type=\"password\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.confirmPassword}\n        />\n      </label>\n      {formik.touched.confirmPassword && formik.errors.confirmPassword ? (\n        <div>{formik.errors.confirmPassword}</div>\n      ) : null}\n\n      <button type=\"submit\">Sign up</button>\n    </form>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\nimport React from 'react';\n\nconst RegisterPage = () => {\n  return (\n    <>\n      <RegisterForm />\n    </>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["dispatch","useDispatch","formik","useFormik","initialValues","name","email","password","confirmPassword","validationSchema","yup","matches","required","min","oneOf","onSubmit","register","resetForm","handleSubmit","type","onChange","handleChange","onBlur","handleBlur","value","values","touched","errors"],"sourceRoot":""}