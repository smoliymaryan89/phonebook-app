{"version":3,"file":"static/js/751.f0a6f407.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { register } from 'redux/auth/authOperations';\nimport * as yup from 'yup';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\n\nconst validationSchema = yup.object({\n  name: yup\n    .string()\n    .matches(/^[A-Za-z\\s'-]+$/, 'Please enter a valid name.')\n    .required('Name is required!'),\n  email: yup\n    .string()\n    .email('Invalid email address.')\n    .required('Email is required!'),\n  password: yup\n    .string()\n    .min(8, 'Password must be at least 8 characters.')\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]+$/,\n      'Password must contain at least one letter, one number, and one special character'\n    )\n    .required('Password is required!'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match.')\n    .required('Confirm password is required!'),\n});\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n    },\n    validationSchema,\n    onSubmit: ({ name, email, password }) => {\n      dispatch(register({ name, email, password }));\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <Flex align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box bg=\"white\" p={10} rounded=\"md\" w={500} boxShadow=\"xl\">\n        <VStack as=\"form\" spacing={4} noValidate onSubmit={formik.handleSubmit}>\n          <FormControl\n            isRequired\n            mb={2}\n            isInvalid={formik.touched.name && formik.errors.name}\n          >\n            <FormLabel>Name</FormLabel>\n            <Input\n              name=\"name\"\n              type=\"text\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={formik.values.name}\n              variant=\"filled\"\n              focusBorderColor=\"purple.400\"\n            />\n\n            <FormErrorMessage>{formik.errors.name}</FormErrorMessage>\n            {/* {formik.touched.name && formik.errors.name ? (\n              <div>{formik.errors.name}</div>\n            ) : null} */}\n          </FormControl>\n\n          <FormControl\n            isRequired\n            mb={2}\n            isInvalid={formik.touched.email && formik.errors.email}\n          >\n            <FormLabel>Email</FormLabel>\n            <Input\n              name=\"email\"\n              type=\"email\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={formik.values.email}\n              variant=\"filled\"\n              focusBorderColor=\"purple.400\"\n            />\n            <FormErrorMessage>{formik.errors.email}</FormErrorMessage>\n\n            {/* {formik.touched.email && formik.errors.email ? (\n              <div>{formik.errors.email}</div>\n            ) : null} */}\n          </FormControl>\n\n          <FormControl\n            isRequired\n            mb={2}\n            isInvalid={formik.touched.password && formik.errors.password}\n          >\n            <FormLabel>Password</FormLabel>\n            <Input\n              name=\"password\"\n              type=\"password\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={formik.values.password}\n              variant=\"filled\"\n              focusBorderColor=\"purple.400\"\n            />\n\n            <FormErrorMessage>{formik.errors.password}</FormErrorMessage>\n\n            {/* {formik.touched.password && formik.errors.password ? (\n              <div>{formik.errors.password}</div>\n            ) : null} */}\n          </FormControl>\n\n          <FormControl\n            isRequired\n            mb={3}\n            isInvalid={\n              formik.touched.confirmPassword && formik.errors.confirmPassword\n            }\n          >\n            <FormLabel>Confirm password</FormLabel>\n            <Input\n              name=\"confirmPassword\"\n              type=\"password\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={formik.values.confirmPassword}\n              variant=\"filled\"\n              focusBorderColor=\"purple.400\"\n            />\n            <FormErrorMessage>{formik.errors.confirmPassword}</FormErrorMessage>\n\n            {/* {formik.touched.confirmPassword && formik.errors.confirmPassword ? (\n              <div>{formik.errors.confirmPassword}</div>\n            ) : null} */}\n          </FormControl>\n\n          <Button type=\"submit\">Sign up</Button>\n        </VStack>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\nimport React from 'react';\n\nconst RegisterPage = () => {\n  return (\n    <>\n      <RegisterForm />\n    </>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["validationSchema","yup","name","matches","required","email","password","min","confirmPassword","oneOf","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","register","resetForm","align","justify","h","bg","p","rounded","w","boxShadow","as","spacing","noValidate","handleSubmit","isRequired","mb","isInvalid","touched","errors","I","type","onChange","handleChange","onBlur","handleBlur","value","values","variant","focusBorderColor"],"sourceRoot":""}