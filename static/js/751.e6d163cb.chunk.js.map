{"version":3,"file":"static/js/751.e6d163cb.chunk.js","mappings":"uPAMMA,EAAmBC,EAAAA,GAAW,CAClCC,KAAMD,EAAAA,KAEHE,QAAQ,kBAAmB,6BAC3BC,SAAS,oBACZC,MAAOJ,EAAAA,KAEJI,MAAM,yBACND,SAAS,sBACZE,SAAUL,EAAAA,KAEPM,IAAI,EAAG,0CACPJ,QACC,8DACA,oFAEDC,SAAS,wBACZI,gBAAiBP,EAAAA,KAEdQ,MAAM,CAACR,EAAAA,GAAQ,YAAa,MAAO,wBACnCG,SAAS,kCAmFd,EAhFqB,WACnB,IAAMM,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbZ,KAAM,GACNG,MAAO,GACPC,SAAU,GACVE,gBAAiB,IAEnBR,iBAAAA,EACAe,SAAU,YAAgC,IAA7Bb,EAA4B,EAA5BA,KAAMG,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxBI,GAASM,EAAAA,EAAAA,IAAS,CAAEd,KAAAA,EAAMG,MAAAA,EAAOC,SAAAA,KACjCM,EAAOK,WACR,IAGH,OACE,kBAAMF,SAAUH,EAAOM,aAAvB,WACE,qCAEE,kBACEhB,KAAK,OACLiB,KAAK,OACLC,SAAUR,EAAOS,aACjBC,OAAQV,EAAOW,WACfC,MAAOZ,EAAOa,OAAOvB,UAGxBU,EAAOc,QAAQxB,MAAQU,EAAOe,OAAOzB,MACpC,yBAAMU,EAAOe,OAAOzB,OAClB,MAEJ,sCAEE,kBACEA,KAAK,QACLiB,KAAK,QACLC,SAAUR,EAAOS,aACjBC,OAAQV,EAAOW,WACfC,MAAOZ,EAAOa,OAAOpB,WAGxBO,EAAOc,QAAQrB,OAASO,EAAOe,OAAOtB,OACrC,yBAAMO,EAAOe,OAAOtB,QAClB,MAEJ,yCAEE,kBACEH,KAAK,WACLiB,KAAK,WACLC,SAAUR,EAAOS,aACjBC,OAAQV,EAAOW,WACfC,MAAOZ,EAAOa,OAAOnB,cAGxBM,EAAOc,QAAQpB,UAAYM,EAAOe,OAAOrB,UACxC,yBAAMM,EAAOe,OAAOrB,WAClB,MAEJ,iDAEE,kBACEJ,KAAK,kBACLiB,KAAK,WACLC,SAAUR,EAAOS,aACjBC,OAAQV,EAAOW,WACfC,MAAOZ,EAAOa,OAAOjB,qBAGxBI,EAAOc,QAAQlB,iBAAmBI,EAAOe,OAAOnB,iBAC/C,yBAAMI,EAAOe,OAAOnB,kBAClB,MAEJ,mBAAQW,KAAK,SAAb,uBAGL,EChGD,EARqB,WACnB,OACE,+BACE,SAAC,EAAD,KAGL,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { register } from 'redux/auth/authOperations';\nimport * as yup from 'yup';\n\nconst validationSchema = yup.object({\n  name: yup\n    .string()\n    .matches(/^[A-Za-z\\s'-]+$/, 'Please enter a valid name')\n    .required('Name is required'),\n  email: yup\n    .string()\n    .email('Invalid email address')\n    .required('Email is required!'),\n  password: yup\n    .string()\n    .min(8, 'Password must be at least 8 characters')\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]+$/,\n      'Password must contain at least one letter, one number, and one special character'\n    )\n    .required('Password is required'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match')\n    .required('Confirm password is required'),\n});\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n    },\n    validationSchema,\n    onSubmit: ({ name, email, password }) => {\n      dispatch(register({ name, email, password }));\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <label>\n        Name\n        <input\n          name=\"name\"\n          type=\"text\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.name}\n        />\n      </label>\n      {formik.touched.name && formik.errors.name ? (\n        <div>{formik.errors.name}</div>\n      ) : null}\n\n      <label>\n        Email\n        <input\n          name=\"email\"\n          type=\"email\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.email}\n        />\n      </label>\n      {formik.touched.email && formik.errors.email ? (\n        <div>{formik.errors.email}</div>\n      ) : null}\n\n      <label>\n        Password\n        <input\n          name=\"password\"\n          type=\"password\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.password}\n        />\n      </label>\n      {formik.touched.password && formik.errors.password ? (\n        <div>{formik.errors.password}</div>\n      ) : null}\n\n      <label>\n        Confirm password\n        <input\n          name=\"confirmPassword\"\n          type=\"password\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.confirmPassword}\n        />\n      </label>\n      {formik.touched.confirmPassword && formik.errors.confirmPassword ? (\n        <div>{formik.errors.confirmPassword}</div>\n      ) : null}\n\n      <button type=\"submit\">Sign up</button>\n    </form>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\nimport React from 'react';\n\nconst RegisterPage = () => {\n  return (\n    <>\n      <RegisterForm />\n    </>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["validationSchema","yup","name","matches","required","email","password","min","confirmPassword","oneOf","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","register","resetForm","handleSubmit","type","onChange","handleChange","onBlur","handleBlur","value","values","touched","errors"],"sourceRoot":""}